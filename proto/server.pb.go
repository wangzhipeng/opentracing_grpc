// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}
func (*TestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_591dc1ab862e8025, []int{0}
}
func (m *TestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRequest.Unmarshal(m, b)
}
func (m *TestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRequest.Marshal(b, m, deterministic)
}
func (dst *TestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRequest.Merge(dst, src)
}
func (m *TestRequest) XXX_Size() int {
	return xxx_messageInfo_TestRequest.Size(m)
}
func (m *TestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRequest proto.InternalMessageInfo

func (m *TestRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TestResponse struct {
	RetCode              int64    `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResponse) Reset()         { *m = TestResponse{} }
func (m *TestResponse) String() string { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()    {}
func (*TestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_591dc1ab862e8025, []int{1}
}
func (m *TestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResponse.Unmarshal(m, b)
}
func (m *TestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResponse.Marshal(b, m, deterministic)
}
func (dst *TestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResponse.Merge(dst, src)
}
func (m *TestResponse) XXX_Size() int {
	return xxx_messageInfo_TestResponse.Size(m)
}
func (m *TestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestResponse proto.InternalMessageInfo

func (m *TestResponse) GetRetCode() int64 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *TestResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "proto.TestRequest")
	proto.RegisterType((*TestResponse)(nil), "proto.TestResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Test1Client is the client API for Test1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Test1Client interface {
	TestHello(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type test1Client struct {
	cc *grpc.ClientConn
}

func NewTest1Client(cc *grpc.ClientConn) Test1Client {
	return &test1Client{cc}
}

func (c *test1Client) TestHello(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/proto.Test1/TestHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Test1Server is the server API for Test1 service.
type Test1Server interface {
	TestHello(context.Context, *TestRequest) (*TestResponse, error)
}

func RegisterTest1Server(s *grpc.Server, srv Test1Server) {
	s.RegisterService(&_Test1_serviceDesc, srv)
}

func _Test1_TestHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test1Server).TestHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Test1/TestHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test1Server).TestHello(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Test1",
	HandlerType: (*Test1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestHello",
			Handler:    _Test1_TestHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

// Test2Client is the client API for Test2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Test2Client interface {
	TestWord(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type test2Client struct {
	cc *grpc.ClientConn
}

func NewTest2Client(cc *grpc.ClientConn) Test2Client {
	return &test2Client{cc}
}

func (c *test2Client) TestWord(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/proto.Test2/TestWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Test2Server is the server API for Test2 service.
type Test2Server interface {
	TestWord(context.Context, *TestRequest) (*TestResponse, error)
}

func RegisterTest2Server(s *grpc.Server, srv Test2Server) {
	s.RegisterService(&_Test2_serviceDesc, srv)
}

func _Test2_TestWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test2Server).TestWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Test2/TestWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test2Server).TestWord(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Test2",
	HandlerType: (*Test2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestWord",
			Handler:    _Test2_TestWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_server_591dc1ab862e8025) }

var fileDescriptor_server_591dc1ab862e8025 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xea, 0x5c, 0xdc,
	0x21, 0xa9, 0xc5, 0x25, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xb9,
	0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x92,
	0x33, 0x17, 0x0f, 0x44, 0x61, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x24, 0x17, 0x47, 0x51,
	0x6a, 0x49, 0x7c, 0x72, 0x7e, 0x0a, 0x44, 0x29, 0x73, 0x10, 0x7b, 0x51, 0x6a, 0x89, 0x73, 0x7e,
	0x4a, 0x2a, 0xb2, 0x21, 0x4c, 0x28, 0x86, 0x18, 0xd9, 0x72, 0xb1, 0x82, 0x0c, 0x31, 0x14, 0x32,
	0xe1, 0xe2, 0x04, 0x31, 0x3c, 0x52, 0x73, 0x72, 0xf2, 0x85, 0x84, 0x20, 0x4e, 0xd2, 0x43, 0x72,
	0x88, 0x94, 0x30, 0x8a, 0x18, 0xc4, 0x4e, 0x23, 0x1b, 0x88, 0x76, 0x23, 0x21, 0x63, 0x2e, 0x0e,
	0x10, 0x23, 0x3c, 0xbf, 0x28, 0x85, 0x68, 0xdd, 0x49, 0x6c, 0x60, 0x31, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x86, 0x77, 0xc1, 0x76, 0x08, 0x01, 0x00, 0x00,
}
